macro(ms_link_static_runtime FLAG_VAR)
    if(MSVC)
        if(${FLAG_VAR} MATCHES "/MD")
            string(REPLACE "/MD"  "/MT" "${FLAG_VAR}" "${${FLAG_VAR}}")
            #Save persistently
            set(${FLAG_VAR} ${${FLAG_VAR}} CACHE STRING "" FORCE)
        endif()
    endif()
endmacro(ms_link_static_runtime)

macro(ms_replace_compiler_flags REPLACE_OPTION)
    set(SUFFIXES "")
    if((NOT DEFINED CMAKE_CONFIGURATION_TYPES) OR (CMAKE_CONFIGURATION_TYPES STREQUAL ""))
        #set(SUFFIXES "_DEBUG" "_RELEASE" "_MINSIZEREL" "_RELWITHDEBINFO")
        if((DEFINED CMAKE_BUILD_TYPE) AND (NOT (CMAKE_BUILD_TYPE STREQUAL "")))
            string(TOUPPER ${CMAKE_BUILD_TYPE} SUFFIXES)
            set(SUFFIXES "_${SUFFIXES}")
        endif()
    else()
        foreach(SUFFIX ${CMAKE_CONFIGURATION_TYPES})
            string(TOUPPER ${SUFFIX} SUFFIX)
            set(SUFFIXES ${SUFFIXES} "_${SUFFIX}")
        endforeach()
    endif()

    foreach(SUFFIX "" ${SUFFIXES})
        foreach(LANG C CXX)
            set(FLAG_VAR "CMAKE_${LANG}_FLAGS${SUFFIX}")
            if(${REPLACE_OPTION} STREQUAL "STATIC_LINK")
                ms_link_static_runtime(${FLAG_VAR})
            endif()
        endforeach()
        #message(STATUS ${FLAG_VAR} ":" ${${FLAG_VAR}})
    endforeach()
endmacro(ms_replace_compiler_flags)

function(ms_check_cxx11_support)
    if(UNIX)
        include(CheckCXXCompilerFlag)        
        CHECK_CXX_COMPILER_FLAG("-std=c++1y" COMPILER_SUPPORTS_CXX11)
    else()
        if(MSVC_VERSION LESS 1700)
            set(COMPILER_SUPPORTS_CXX11 0)
        else()
            set(COMPILER_SUPPORTS_CXX11 1)
        endif()
    endif()

    if(COMPILER_SUPPORTS_CXX11)
    else()
        message(FATAL_ERROR "You need a compiler with C++1y support.")
    endif()
endfunction(ms_check_cxx11_support)

########################################################################
# Provide add_compile_options() when not available
########################################################################
if(CMAKE_VERSION VERSION_LESS "2.8.12")
    function(add_compile_options)
        add_definitions(${ARGN})
    endfunction(add_compile_options)
endif()

function(dsn_setup_compiler_flags)
    ms_replace_compiler_flags("STATIC_LINK")

    if(UNIX)
        if(CMAKE_USE_PTHREADS_INIT)
            add_compile_options(-pthread)
        endif()   
        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
            add_definitions(-D_DEBUG)
            add_compile_options(-g)
            add_compile_options(-gdwarf-2)
        else()
            add_definitions(-O2)
        endif()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y" CACHE STRING "" FORCE)
        add_compile_options(-Wall)
        add_compile_options(-fPIC)
        add_compile_options(-Werror)
        add_compile_options(-Wno-sign-compare)
        add_compile_options(-Wno-strict-aliasing)
        if(NOT APPLE)
            add_compile_options(-Wno-maybe-uninitialized)
        else()
            add_compile_options(-fno-pie) # for TcMalloc
            add_compile_options(-Wno-braced-scalar-init)
            add_compile_options(-Wno-sometimes-uninitialized)
            add_compile_options(-Wno-overloaded-virtual)
            add_compile_options(-Wno-undefined-inline)
            add_compile_options(-Wno-missing-braces)
            add_compile_options(-Wno-unused-const-variable)
            add_compile_options(-Wno-unused-private-field)
            # add_compile_options(-Wmissing-field-initializers)
        endif()
        add_compile_options(-Wno-unused-result)
        add_compile_options(-Wno-unused-function)
    elseif(MSVC)
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)
        add_definitions(-DWIN32_LEAN_AND_MEAN)        
        add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
        add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS=1)
        add_definitions(-D_WIN32_WINNT=0x0600)
        add_definitions(-D_UNICODE)
        add_definitions(-DUNICODE)
        add_compile_options(-MP)
        if(DEFINED DSN_PEDANTIC)
            add_compile_options(-WX)
        endif()
    endif()
endfunction(dsn_setup_compiler_flags)

function(dsn_make_source_group_by_subdir GROUP_PREFIX SOURCE_LIST)
    if(GROUP_PREFIX STREQUAL "")
        # Assume that the source file path starts with ${CMAKE_CURRENT_SOURCE_DIR}
        set(GROUP_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}")
    endif()
    string(REPLACE "/" "\\" GROUP_PREFIX "${GROUP_PREFIX}/")
    string(LENGTH "${GROUP_PREFIX}" GROUP_PREFIX_LENGTH)
    foreach(SRC_FILE IN LISTS SOURCE_LIST)
        get_filename_component(SRC_PATH "${SRC_FILE}" PATH)
        string(REPLACE "/" "\\" SRC_PATH "${SRC_PATH}")
        string(FIND "${SRC_PATH}" "${GROUP_PREFIX}" IDX)
        # IDX != 0 means that either the source file is not in ${CMAKE_CURRENT_SOURCE_DIR}
        # , or it is in the root of ${CMAKE_CURRENT_SOURCE_DIR}.
        set(GROUP_NAME "")
        if(IDX EQUAL 0)
            #math(EXPR IDX "${IDX} + ${prefix_len}")
            string(SUBSTRING "${SRC_PATH}" "${GROUP_PREFIX_LENGTH}" -1 GROUP_NAME)
        endif()
        source_group("${GROUP_NAME}" FILES "${SRC_FILE}")
    endforeach()    
endfunction(dsn_make_source_group_by_subdir)

function(dsn_add_pseudo_projects)
    if(MSVC_IDE)
        file(GLOB_RECURSE
            PROJ_SRC
            "${CMAKE_SOURCE_DIR}/include/dsn/*.h"
            "${CMAKE_SOURCE_DIR}/include/dsn/*.hpp"
            )
        dsn_make_source_group_by_subdir("${CMAKE_SOURCE_DIR}/include/dsn" "${PROJ_SRC}")
        add_custom_target("dsn.include" SOURCES ${PROJ_SRC})
    endif()
endfunction(dsn_add_pseudo_projects)

function(dsn_common_setup)
    if(NOT (UNIX OR WIN32))
        message(FATAL_ERROR "Only Unix and Windows are supported.")
    endif()

    if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
        message(FATAL_ERROR "In-source builds are not allowed.")
    endif()

    message (STATUS "Installation directory: CMAKE_INSTALL_PREFIX = " ${CMAKE_INSTALL_PREFIX})
    
    ms_check_cxx11_support()
    dsn_setup_compiler_flags()
endfunction(dsn_common_setup)


